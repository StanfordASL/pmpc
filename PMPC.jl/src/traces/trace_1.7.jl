using Core
using StaticArraysCore
using SuiteSparse
using PMPC
using JuMP
using OrderedCollections
using AMD
using OSQP
using COSMO
using PyCall
using SparseArrays
using DocStringExtensions
using Infiltrator
using Artifacts
using StaticArrays
using Parsers
using ECOS
using Mosek
#using _PyJuliaHelper
using MathOptInterface
using Requires
using MutableArithmetics
precompile(Tuple{typeof(Base.:(!=)), UInt64, UInt64})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.resize!), Array{Base.GMP.BigInt, 1}, Int64})
precompile(Tuple{typeof(Base.resize!), Array{Base.MPFR.BigFloat, 1}, Int64})
precompile(Tuple{typeof(PyCall._set_finalized)})
precompile(Tuple{typeof(PyCall.pyjlwrap_dealloc), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_repr), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_hash), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_hash32), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_call), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_getattr), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_getiter), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.__init__)})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Base.Timer}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Ptr{Nothing}}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}})
precompile(Tuple{typeof(Base.empty!), Base.IdDict{DataType, Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(Base.getproperty), PyCall.PyObject, Symbol})
precompile(Tuple{typeof(Base.convert), Type{PyCall.PyObject}, PyCall.PyObject})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{DataType, Ptr{PyCall.PyObject_struct}}, Any, Any})
precompile(Tuple{typeof(Base._append!), Array{PyCall.PyMemberDef, 1}, Base.HasLength, Tuple{PyCall.PyMemberDef, PyCall.PyMemberDef}})
precompile(Tuple{typeof(Base.getproperty), PyCall.PyError, Symbol})
precompile(Tuple{typeof(Base.unsafe_load), Ptr{Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(PyCall.pyisinstance), PyCall.PyObject, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.current_python)})
precompile(Tuple{typeof(Base.escape_string), String})
precompile(Tuple{Type{PyCall.PyError}, String, PyCall.PyError})
precompile(Tuple{typeof(Base.get!), PyCall.var"#115#116"{Module}, Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}, Module})
precompile(Tuple{typeof(Base.convert), Type{PyCall.PyObject}, Function})
precompile(Tuple{typeof(Base.isimmutable), Any})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Base.RefValue{Any}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{Base.var"#@v_str", LineNumberNode, Module, Any})
precompile(Tuple{typeof(Base.convert), Type{PyCall.PyObject}, Bool})
precompile(Tuple{Base.var"#@eval", LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Base.convert), Type{PyCall.PyObject}, Nothing})
precompile(Tuple{typeof(PyCall._pyjlwrap_call), Function, Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.typetuple), Base.Generator{Base.UnitRange{Int64}, PyCall.var"#36#37"{PyCall.PyObject}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, PyCall.var"#36#37"{PyCall.PyObject}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, PyCall.var"#36#37"{PyCall.PyObject}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{String}}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.isvatuple), DataType})
precompile(Tuple{typeof(Base.MainInclude.include), String})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(PyCall.pydecref), PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pydecref), PyCall.PyBuffer})
precompile(Tuple{typeof(Base.Docs.doc!), Module, Base.Docs.Binding, Base.Docs.DocStr, Any})
precompile(Tuple{Type{Ref{IO}}})
precompile(Tuple{Type{Ref{Base.PipeEndpoint}}})
precompile(Tuple{Base.var"#@async", LineNumberNode, Module, Any})
#precompile(Tuple{typeof(_PyJuliaHelper.IOPiper.__init__)})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{IO}, Base.PipeEndpoint})
precompile(Tuple{typeof(PyCall.pyreturn), Module})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Module, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.delete!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Base.Dict{String, Any}, Nothing}, Any, Any})
precompile(Tuple{typeof(DocStringExtensions.__init__)})
precompile(Tuple{typeof(Artifacts._artifact_str), Module, String, Base.SubString{String}, String, Base.Dict{String, Any}, Base.SHA1, Base.BinaryPlatforms.Platform, Any})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(AMD.__init__)})
precompile(Tuple{typeof(Base.Libc.Libdl.dlsym), Ptr{Nothing}, String})
precompile(Tuple{typeof(Infiltrator.__init__)})
precompile(Tuple{typeof(Mosek.__init__)})
precompile(Tuple{typeof(COSMO.__init__)})
precompile(Tuple{typeof(Requires.isprecompiling)})
precompile(Tuple{typeof(ECOS.__init__)})
precompile(Tuple{typeof(PyCall.array_format), PyCall.PyObject})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, DataType}, String})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Array{Float64, N} where N, Array{Float64, N} where N, Array{Float64, N} where N, Array{Float64, N} where N, Array{Float64, N} where N, Array{Float64, N} where N, Array{Float64, N} where N, Array{Float64, N} where N, Array{Float64, N} where N, Array{Float64, N} where N}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.length), Core.SimpleVector})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{SA} where SA<:(StaticArraysCore.StaticArray{S, T, N} where N where T) where S<:Tuple, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{T} where T<:(StaticArraysCore.StaticArray{S, T, N} where N where T where S<:Tuple), Int64}}})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, N} where N}, PyCall.PyObject})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, PyCall.var"#9#10"{PyCall.PyBuffer}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, PyCall.var"#9#10"{PyCall.PyBuffer}}, Int64})
precompile(Tuple{Type{PyCall.PyArray_Info{Float64, 2}}, Bool, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Ptr{Nothing}, Bool, PyCall.PyBuffer})
precompile(Tuple{Type{PyCall.PyArray{Float64, 2}}, PyCall.PyObject, PyCall.PyArray_Info{Float64, 2}})
precompile(Tuple{typeof(PyCall.pyocopy), PyCall.PyArray{Float64, 2}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, PyCall.PyArray{Float64, 2}})
precompile(Tuple{Type{PyCall.PyArray_Info{Float64, 3}}, Bool, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Ptr{Nothing}, Bool, PyCall.PyBuffer})
precompile(Tuple{Type{PyCall.PyArray{Float64, 3}}, PyCall.PyObject, PyCall.PyArray_Info{Float64, 3}})
precompile(Tuple{typeof(PyCall.pyocopy), PyCall.PyArray{Float64, 3}})
precompile(Tuple{Type{PyCall.PyArray_Info{Float64, 4}}, Bool, Tuple{Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64}, Ptr{Nothing}, Bool, PyCall.PyBuffer})
precompile(Tuple{Base.Cartesian.var"#@ncall", LineNumberNode, Module, Int64, Any, Vararg{Any}})
precompile(Tuple{Type{PyCall.PyArray{Float64, 4}}, PyCall.PyObject, PyCall.PyArray_Info{Float64, 4}})
precompile(Tuple{typeof(PyCall.pyocopy), PyCall.PyArray{Float64, 4}})
precompile(Tuple{Type{PyCall.PyDict{Symbol, PyCall.PyObject, isdict} where isdict}, PyCall.PyObject})
precompile(Tuple{Type{PyCall.PyDict{Symbol, PyCall.PyObject, true}}, PyCall.PyObject})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, PyCall.var"#57#58"{typeof(PMPC.lcone_solve)}, PyCall.PyDict{Symbol, PyCall.PyObject, true}})
precompile(Tuple{typeof(Base.collect), Base.Generator{PyCall.PyDict{Symbol, PyCall.PyObject, true}, PyCall.var"#57#58"{typeof(PMPC.lcone_solve)}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ref{Int64}}, Base.RefValue{Int64}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ref{Ptr{PyCall.PyObject_struct}}}, Base.RefValue{Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(Base.convert), Type{Float64}, PyCall.PyObject})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{Symbol, Float64}}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Symbol, Float64}, 1}, Tuple{Symbol, Float64}, Base.Generator{PyCall.PyDict{Symbol, PyCall.PyObject, true}, PyCall.var"#57#58"{typeof(PMPC.lcone_solve)}}, PyCall.PyDict_Iterator})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{Symbol, Float64}, 1}, Tuple{Symbol, Array{Float64, 3}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Symbol, Any}, 1}, Base.Generator{PyCall.PyDict{Symbol, PyCall.PyObject, true}, PyCall.var"#57#58"{typeof(PMPC.lcone_solve)}}, Int64, PyCall.PyDict_Iterator})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Array{Tuple{Symbol, Any}, 1}})
precompile(Tuple{Type{NamedTuple{(:reg_x, :reg_u, :lx, :ux, :lu, :uu, :solver, :smooth_cstr, :smooth_alpha, :solver_state), T} where T<:Tuple}, Tuple{Float64, Float64, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, String, String, Float64, Nothing}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:reg_x, :reg_u, :lx, :ux, :lu, :uu, :solver, :smooth_cstr, :smooth_alpha, :solver_state), Tuple{Float64, Float64, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, String, String, Float64, Nothing}}})
precompile(Tuple{typeof(Base._compute_eltype), Any})
precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Any, Nothing}, Any, Any})
precompile(Tuple{Base.var"#invokelatest##kw", NamedTuple{(:reg_x, :reg_u, :lx, :ux, :lu, :uu, :solver, :smooth_cstr, :smooth_alpha, :solver_state), Tuple{Float64, Float64, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, String, String, Float64, Nothing}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{Base.var"##invokelatest#2", Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:reg_x, :reg_u, :lx, :ux, :lu, :uu, :solver, :smooth_cstr, :smooth_alpha, :solver_state), Tuple{Float64, Float64, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, String, String, Float64, Nothing}}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{SA} where SA<:(StaticArraysCore.StaticArray{S, U, 1} where U) where S<:Tuple, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{SA} where SA<:(StaticArraysCore.StaticArray{S, U, 1} where U where S<:Tuple), Int64}}})
precompile(Tuple{typeof(Core.Compiler.isbitsunion), Union})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{SA} where SA<:StaticArraysCore.StaticArray{S, Float64, 2} where S<:Tuple, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{T} where T<:(StaticArraysCore.StaticArray{S, Float64, 2} where S<:Tuple), Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{S} where S<:(Base.Broadcast.DefaultArrayStyle{_A} where _A), Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{F} where F<:MathOptInterface.AbstractFunction, Int64}}})
precompile(Tuple{PMPC.var"#lcone_solve##kw", NamedTuple{(:reg_x, :reg_u, :lx, :ux, :lu, :uu, :solver, :smooth_cstr, :smooth_alpha, :solver_state), Tuple{Float64, Float64, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, String, String, Float64, Nothing}}, typeof(PMPC.lcone_solve), Array{Float64, 2}, Array{Float64, 3}, Array{Float64, 4}, Array{Float64, 4}, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 4}, Array{Float64, 4}, Array{Float64, 3}, Array{Float64, 3}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Float64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Float64, Symbol})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Array{Float64, 3}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Float64, 3}, Symbol})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Nothing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Nothing, Symbol})
precompile(Tuple{PMPC.var"#80#85", Array{Float64, 3}})
precompile(Tuple{typeof(Base.map), PMPC.var"#80#85", Tuple{Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}}})
precompile(Tuple{typeof(Base.repeat), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.maybeview), Array{Float64, 3}, Function, Function, Vararg{Any}})
precompile(Tuple{typeof(Base.view), Array{Float64, 3}, Function, Function, Int64})
precompile(Tuple{typeof(Base.to_indices), Array{Float64, 3}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, Tuple{Base.Colon, Base.Colon, Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Symbol})
precompile(Tuple{typeof(Base.maybeview), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.maybeview), Array{Float64, 2}, Function, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Symbol})
precompile(Tuple{Type{NamedTuple{(:lu, :reg_u, :slew_reg0, :lx, :reg_x, :solver, :solver_state, :smooth_alpha, :slew_um1, :ux, :uu, :slew_reg, :smooth_cstr), T} where T<:Tuple}, Tuple{Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Float64, Float64, Nothing, Float64, String, Nothing, Float64, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Nothing, Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Float64, String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:lu, :reg_u, :slew_reg0, :lx, :reg_x, :solver, :solver_state, :smooth_alpha, :slew_um1, :ux, :uu, :slew_reg, :smooth_cstr), Tuple{Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Float64, Float64, Nothing, Float64, String, Nothing, Float64, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Nothing, Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Float64, String}}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#43#44", Type, Type, Type, Type, Type})
precompile(Tuple{PMPC.var"#make_prob##kw", NamedTuple{(:lu, :reg_u, :slew_reg0, :lx, :reg_x, :solver, :solver_state, :smooth_alpha, :slew_um1, :ux, :uu, :slew_reg, :smooth_cstr), Tuple{Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Float64, Float64, Nothing, Float64, String, Nothing, Float64, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Nothing, Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Float64, String}}, typeof(PMPC.make_prob), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}})
precompile(Tuple{typeof(Base.map), PMPC.var"#7#8", Tuple{Nothing, Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}}})
precompile(Tuple{Type{PMPC.OCProb{Float64}}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Float64, Float64, Float64, Nothing, Float64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.setproperty!), PMPC.OCProb{Float64}, Symbol, Float64})
precompile(Tuple{typeof(Base.setproperty!), PMPC.OCProb{Float64}, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, AbstractArray{Float64, 1}}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(==)), Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Nothing})
precompile(Tuple{typeof(PMPC.set_ubounds!), PMPC.OCProb{Float64}, Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}})
precompile(Tuple{Type{NamedTuple{(:slew_reg0, :slew_um1, :slew_reg), T} where T<:Tuple}, Tuple{Float64, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Float64}})
precompile(Tuple{PMPC.var"#set_ctrl_slew!##kw", NamedTuple{(:slew_reg0, :slew_um1, :slew_reg), Tuple{Float64, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Float64}}, typeof(PMPC.set_ctrl_slew!), PMPC.OCProb{Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, PMPC.var"#102#104", Base.Dict{Any, Any}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Generator{Base.Dict{Any, Any}, PMPC.var"#102#104"}})
precompile(Tuple{typeof(PMPC.lcone_repr_Pq), Array{PMPC.OCProb{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.Threads.threading_run), Function})
precompile(Tuple{PMPC.var"#407#threadsfor_fun#70"{Array{PMPC.OCProb{Float64}, 1}, Array{Array{Float64, 1}, 1}, Array{SparseArrays.SparseMatrixCSC{Float64, Int64}, 1}, Array{SparseArrays.SparseMatrixCSC{Float64, Int64}, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.:(!=)), Float64, Float64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.:(*)), Float64, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Int64, Int64})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Float64, Base.Val{2}})
precompile(Tuple{typeof(Base.:(+)), Int64, Float64})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64, Float64})
precompile(Tuple{typeof(SuiteSparse.LibSuiteSparse.cholmod_l_allocate_sparse), Int64, Int64, Int64, Bool, Bool, Int64, Int64, Base.RefValue{SuiteSparse.LibSuiteSparse.cholmod_common_struct}})
precompile(Tuple{typeof(SuiteSparse.LibSuiteSparse.cholmod_l_check_sparse), SuiteSparse.CHOLMOD.Sparse{Float64}, Base.RefValue{SuiteSparse.LibSuiteSparse.cholmod_common_struct}})
precompile(Tuple{typeof(SuiteSparse.LibSuiteSparse.cholmod_l_symmetry), SuiteSparse.CHOLMOD.Sparse{Float64}, Int64, Base.RefValue{Int64}, Base.RefValue{Int64}, Base.RefValue{Int64}, Base.RefValue{Int64}, Base.RefValue{SuiteSparse.LibSuiteSparse.cholmod_common_struct}})
precompile(Tuple{typeof(Base.getproperty), SuiteSparse.LibSuiteSparse.cholmod_common_struct, Symbol})
precompile(Tuple{typeof(Base.setproperty!), SuiteSparse.LibSuiteSparse.cholmod_common_struct, Symbol, Bool})
precompile(Tuple{typeof(Base.convert), Type{Int32}, Bool})
precompile(Tuple{typeof(SuiteSparse.LibSuiteSparse.cholmod_l_analyze), SuiteSparse.CHOLMOD.Sparse{Float64}, Base.RefValue{SuiteSparse.LibSuiteSparse.cholmod_common_struct}})
precompile(Tuple{typeof(Base.setproperty!), SuiteSparse.LibSuiteSparse.cholmod_common_struct, Symbol, Int32})
precompile(Tuple{typeof(SuiteSparse.LibSuiteSparse.cholmod_l_factorize_p), SuiteSparse.CHOLMOD.Sparse{Float64}, Base.RefValue{Float64}, Ptr{Nothing}, Int64, SuiteSparse.CHOLMOD.Factor{Float64}, Base.RefValue{SuiteSparse.LibSuiteSparse.cholmod_common_struct}})
precompile(Tuple{Type{SuiteSparse.CHOLMOD.FactorComponent{Float64, :L}}, SuiteSparse.CHOLMOD.Factor{Float64}})
precompile(Tuple{typeof(SuiteSparse.LibSuiteSparse.cholmod_l_copy_factor), SuiteSparse.CHOLMOD.Factor{Float64}, Base.RefValue{SuiteSparse.LibSuiteSparse.cholmod_common_struct}})
precompile(Tuple{typeof(SuiteSparse.LibSuiteSparse.cholmod_l_factor_to_sparse), SuiteSparse.CHOLMOD.Factor{Float64}, Base.RefValue{SuiteSparse.LibSuiteSparse.cholmod_common_struct}})
precompile(Tuple{Base.Sort.var"##sortperm#12", Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Int64, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Int64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Int64, 1}}})
precompile(Tuple{typeof(SparseArrays.ftranspose), SparseArrays.SparseMatrixCSC{Float64, Int64}, Function, Type{Float64}})
precompile(Tuple{typeof(SparseArrays._distributevals_halfperm!), SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Base.UnitRange{Int64}, SparseArrays.var"#12#13"})
precompile(Tuple{typeof(Base.__cat_offset!), Array{Float64, 1}, Tuple{Int64}, Tuple{Bool}, Tuple{Int64}, Float64, Float64, Vararg{Any}})
precompile(Tuple{typeof(Base.__cat_offset!), Array{Float64, 1}, Tuple{Int64}, Tuple{Bool}, Tuple{Int64}, Float64, Array{Float64, 1}})
precompile(Tuple{typeof(SparseArrays._absspvec_vcat), SparseArrays.SparseVector{Float64, Int64}, Vararg{SparseArrays.SparseVector{Float64, Int64}}})
precompile(Tuple{typeof(SparseArrays.blockdiag), SparseArrays.SparseMatrixCSC{Float64, Int64}})
precompile(Tuple{PMPC.var"#422#threadsfor_fun#71"{Int64, Array{SparseArrays.SparseMatrixCSC{Float64, Int64}, 1}, Array{SparseArrays.SparseMatrixCSC{Float64, Int64}, 1}, Int64, Int64, Int64, Int64, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.hcat), SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Vararg{SparseArrays.SparseMatrixCSC{Float64, Int64}}})
precompile(Tuple{typeof(Base.promote_eltype), SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Vararg{SparseArrays.SparseMatrixCSC{Float64, Int64}}})
precompile(Tuple{typeof(Base.map), SparseArrays.var"#32#33", Tuple{SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}}})
precompile(Tuple{typeof(Base.promote_eltype), Array{Int64, 1}, Array{Int64, 1}, Vararg{Array{Int64, 1}}})
precompile(Tuple{typeof(PMPC.lcone_repr_Ab), Array{PMPC.OCProb{Float64}, 1}, Int64})
precompile(Tuple{typeof(PMPC.lcone_repr_Gla), Array{PMPC.OCProb{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Int64})
precompile(Tuple{typeof(Base.zeros), Int64})
precompile(Tuple{typeof(Base.vcat), Array{Float64, 1}, Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{Type{PMPC.ConeProblem}, Int64, Array{Int64, 1}, Int64, SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:method, :solver), T} where T<:Tuple}, Tuple{String, String}})
precompile(Tuple{PMPC.var"#smoothen_linear_inequlities##kw", NamedTuple{(:method, :solver), Tuple{String, String}}, typeof(PMPC.smoothen_linear_inequlities), SparseArrays.SparseMatrixCSC{Float64, Int64}, Array{Float64, 1}, Float64})
precompile(Tuple{typeof(SparseArrays.blockdiag), SparseArrays.SparseMatrixCSC{Float64, Int64}, Vararg{SparseArrays.SparseMatrixCSC{Float64, Int64}}})
precompile(Tuple{typeof(SparseArrays._blockdiag), Type{Float64}, Type{Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Vararg{SparseArrays.SparseMatrixCSC{Float64, Int64}}})
precompile(Tuple{Type{NamedTuple{(:extra_cstr,), T} where T<:Tuple}, Tuple{Tuple{Int64, Array{Int64, 1}, Int64, SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(StaticArraysCore.tuple_length), Type{Tuple{1}}})
precompile(Tuple{typeof(StaticArrays.typeintersect), Any, Any})
precompile(Tuple{Type{StaticArraysCore.Size{S} where S}, Type{Tuple{1}}})
precompile(Tuple{StaticArraysCore.var"##s4#1", Any, Any, Any, Any, Any, Type, Type, Type, Any})
precompile(Tuple{typeof(Base.all), Function, Core.SimpleVector})
precompile(Tuple{typeof(Base._all), StaticArraysCore.var"#2#3", Core.SimpleVector, Base.Colon})
precompile(Tuple{typeof(StaticArraysCore.tuple_prod), Type{Tuple{1}}})
precompile(Tuple{typeof(Base.:(*)), Int64})
precompile(Tuple{typeof(StaticArraysCore.tuple_minimum), Type{Tuple{1}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{T} where T<:(StaticArraysCore.StaticArray{Tuple{N}, Float64, 1} where N), Int64}}})
precompile(Tuple{PMPC.var"#augment_cone_problem!##kw", NamedTuple{(:extra_cstr,), Tuple{Tuple{Int64, Array{Int64, 1}, Int64, SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, typeof(PMPC.augment_cone_problem!), PMPC.ConeProblem})
precompile(Tuple{typeof(SuiteSparse.CHOLMOD.free!), SuiteSparse.CHOLMOD.Sparse{Float64}})
precompile(Tuple{typeof(SuiteSparse.LibSuiteSparse.cholmod_l_free_sparse), Base.RefValue{Ptr{SuiteSparse.LibSuiteSparse.cholmod_sparse_struct}}, Base.RefValue{SuiteSparse.LibSuiteSparse.cholmod_common_struct}})
precompile(Tuple{typeof(SuiteSparse.CHOLMOD.free!), SuiteSparse.CHOLMOD.Factor{Float64}})
precompile(Tuple{typeof(SuiteSparse.LibSuiteSparse.cholmod_l_free_factor), Base.RefValue{Ptr{SuiteSparse.LibSuiteSparse.cholmod_factor_struct}}, Base.RefValue{SuiteSparse.LibSuiteSparse.cholmod_common_struct}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.sum), Array{Int64, 1}})
precompile(Tuple{typeof(Base.vcat), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.setproperty!), PMPC.ConeProblem, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(Base.copy), Array{Float64, 1}})
precompile(Tuple{typeof(Base.convert), Type{AbstractArray{Float64, 1}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.view), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple, 1}})
precompile(Tuple{Type{NamedTuple{(:verbose,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:verbose,), Tuple{Bool}}})
precompile(Tuple{PMPC.var"#ECOS_solve##kw", NamedTuple{(:verbose,), Tuple{Bool}}, typeof(PMPC.ECOS_solve), PMPC.ConeProblem})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Symbol, 1}, PMPC.var"#55#56"{PMPC.ConeProblem}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Symbol, 1}, PMPC.var"#55#56"{PMPC.ConeProblem}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Symbol, 1}, PMPC.var"#50#52"{PMPC.ConeProblem}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Symbol, 1}, PMPC.var"#50#52"{PMPC.ConeProblem}}, Int64, Int64})
precompile(Tuple{typeof(Base.copy), SparseArrays.SparseMatrixCSC{Float64, Int64}})
precompile(Tuple{typeof(Base.size), SparseArrays.SparseMatrixCSC{Float64, Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.size), SparseArrays.SparseMatrixCSC{Float64, Int64}, Int64})
precompile(Tuple{typeof(Base.lastindex), SparseArrays.SparseMatrixCSC{Float64, Int64}, Int64})
precompile(Tuple{typeof(Base.maybeview), SparseArrays.SparseMatrixCSC{Float64, Int64}, Base.UnitRange{Int64}, Function})
precompile(Tuple{typeof(Base.getindex), SparseArrays.SparseMatrixCSC{Float64, Int64}, Base.UnitRange{Int64}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, SparseArrays.SparseMatrixCSC{Float64, Int64}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{SparseArrays.HigherOrderFns.SparseMatStyle, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{SparseArrays.SparseMatrixCSC{Float64, Int64}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 2, SparseArrays.SparseMatrixCSC{Float64, Int64}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}, false}, Base.Broadcast.Broadcasted{SparseArrays.HigherOrderFns.SparseMatStyle, Nothing, typeof(Base.:(*)), Tuple{SparseArrays.SparseMatrixCSC{Float64, Int64}, Int64}}})
precompile(Tuple{typeof(Base.lastindex), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.maybeview), Array{Float64, 1}, Base.UnitRange{Int64}, Function})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.UnitRange{Int64}, Function})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{Float64, 2}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Float64, 2, Array{Float64, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}, false}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 2}, Int64}}})
precompile(Tuple{typeof(Base.getproperty), SparseArrays.SparseMatrixCSC{Float64, Int64}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Int64, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Array{Int64, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(ECOS.ECOS_setup), Int64, Int64, Int64, Int64, Int64, Array{Int64, 1}, Int64, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{ECOS.settings}, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Int64, Int64, Int64, Float64, Float64})
precompile(Tuple{typeof(Base.getproperty), PMPC.ECOS_result, Symbol})
precompile(Tuple{typeof(Base.lastindex), Array{Float64, 1}})
precompile(Tuple{typeof(PMPC.split_lqp_vars), Array{PMPC.OCProb{Float64}, 1}, Int64, Array{Float64, 1}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Pair{Symbol, Float64}, Vararg{Pair{A, B} where B where A}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(PyCall.weakref_callback), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyreturn), Tuple{Array{Float64, 3}, Array{Float64, 3}, Base.Dict{Symbol, Any}}})
#precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(getfield), Tuple{Base.Broadcast.Extruded{Array{LinearAlgebra.BLAS.LBTLibraryInfo, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Type{String}})
#precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(getfield), Tuple{Base.Broadcast.Extruded{Array{LinearAlgebra.BLAS.LBTLibraryInfo, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.any), Function, Array{String, 1}})
precompile(Tuple{Base.var"##any#755", Function, typeof(Base.any), Function, Array{String, 1}})
precompile(Tuple{typeof(Base._any), Base.Fix2{typeof(Base.contains), String}, Array{String, 1}, Base.Colon})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Array{Float64, 3}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{PyCall.PyObject_struct}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{PyCall.PyObject_struct}}, PyCall.PyObject})
precompile(Tuple{Type{PyCall.PyObject}, Float64})
precompile(Tuple{Type{PyCall.PyObject}, String})
precompile(Tuple{Type{PyCall.PyObject}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Array{Float64, 1}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{Type{NamedTuple{(:reg_x, :reg_u, :lx, :ux, :lu, :uu, :solver, :solver_state), T} where T<:Tuple}, Tuple{Float64, Float64, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, String, Nothing}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:reg_x, :reg_u, :lx, :ux, :lu, :uu, :solver, :solver_state), Tuple{Float64, Float64, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, String, Nothing}}})
precompile(Tuple{Base.var"#invokelatest##kw", NamedTuple{(:reg_x, :reg_u, :lx, :ux, :lu, :uu, :solver, :solver_state), Tuple{Float64, Float64, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, String, Nothing}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{Base.var"##invokelatest#2", Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:reg_x, :reg_u, :lx, :ux, :lu, :uu, :solver, :solver_state), Tuple{Float64, Float64, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, String, Nothing}}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{PMPC.var"#lcone_solve##kw", NamedTuple{(:reg_x, :reg_u, :lx, :ux, :lu, :uu, :solver, :solver_state), Tuple{Float64, Float64, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, String, Nothing}}, typeof(PMPC.lcone_solve), Array{Float64, 2}, Array{Float64, 3}, Array{Float64, 4}, Array{Float64, 4}, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 4}, Array{Float64, 4}, Array{Float64, 3}, Array{Float64, 3}})
precompile(Tuple{Type{NamedTuple{(:lu, :reg_u, :slew_reg0, :lx, :reg_x, :solver, :solver_state, :slew_um1, :ux, :uu, :slew_reg), T} where T<:Tuple}, Tuple{Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Float64, Float64, Nothing, Float64, String, Nothing, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Nothing, Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Float64}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:lu, :reg_u, :slew_reg0, :lx, :reg_x, :solver, :solver_state, :slew_um1, :ux, :uu, :slew_reg), Tuple{Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Float64, Float64, Nothing, Float64, String, Nothing, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Nothing, Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Float64}}})
precompile(Tuple{PMPC.var"#make_prob##kw", NamedTuple{(:lu, :reg_u, :slew_reg0, :lx, :reg_x, :solver, :solver_state, :slew_um1, :ux, :uu, :slew_reg), Tuple{Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Float64, Float64, Nothing, Float64, String, Nothing, Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Nothing, Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Float64}}, typeof(PMPC.make_prob), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 3, Array{Float64, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float64, 2, Array{Float64, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, PyCall.var"#57#58"{typeof(PMPC.lqp_solve)}, PyCall.PyDict{Symbol, PyCall.PyObject, true}})
precompile(Tuple{typeof(Base.collect), Base.Generator{PyCall.PyDict{Symbol, PyCall.PyObject, true}, PyCall.var"#57#58"{typeof(PMPC.lqp_solve)}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Symbol, Float64}, 1}, Tuple{Symbol, Float64}, Base.Generator{PyCall.PyDict{Symbol, PyCall.PyObject, true}, PyCall.var"#57#58"{typeof(PMPC.lqp_solve)}}, PyCall.PyDict_Iterator})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Symbol, Any}, 1}, Base.Generator{PyCall.PyDict{Symbol, PyCall.PyObject, true}, PyCall.var"#57#58"{typeof(PMPC.lqp_solve)}}, Int64, PyCall.PyDict_Iterator})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{MathOptInterface.Bridges.ListOfNonstandardBridges{_A} where _A, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{ElT} where ElT<:JuMP.AbstractJuMPScalar, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{var"#s65"} where var"#s65"<:Union{JuMP.AbstractJuMPScalar, Array{var"#s63", 1} where var"#s63"<:JuMP.AbstractJuMPScalar}, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{var"#s523"} where var"#s523"<:MathOptInterface.AbstractSet, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{SparseArrays.SparseMatrixCSC{Float64, Ti} where Ti<:Integer, Int64}}})
precompile(Tuple{PMPC.var"#lqp_solve##kw", NamedTuple{(:reg_x, :reg_u, :lx, :ux, :lu, :uu, :solver, :solver_state), Tuple{Float64, Float64, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, String, Nothing}}, typeof(PMPC.lqp_solve), Array{Float64, 2}, Array{Float64, 3}, Array{Float64, 4}, Array{Float64, 4}, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 4}, Array{Float64, 4}, Array{Float64, 3}, Array{Float64, 3}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{Float64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Float64}, Float64, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Float64}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:reg_x, :reg_u, :lx, :ux, :lu, :uu, :solver, :solver_state), Tuple{Float64, Float64, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, String, Nothing}}}, PMPC.var"#97#98"}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Float64}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Float64}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Base.Generator{Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:reg_x, :reg_u, :lx, :ux, :lu, :uu, :solver, :solver_state), Tuple{Float64, Float64, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, Array{Float64, 3}, String, Nothing}}}, PMPC.var"#97#98"}, Int64})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Bool})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Int64})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Nothing})
precompile(Tuple{typeof(PMPC.lqp_repr_Pq), Array{PMPC.OCProb{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.mapreduce_first), PMPC.var"#46#48"{Array{PMPC.OCProb{Float64}, 1}}, Function, Int64})
precompile(Tuple{typeof(Base.reduce_first), Function, Array{Float64, 1}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{Type{PMPC.OSQPSolver{Float64}}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing})
precompile(Tuple{typeof(Base.setproperty!), PMPC.OSQPSolver{Float64}, Symbol, Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:reg_x, :lu, :uu, :reg_u, :solver, :solver_state, :lx, :ux), T} where T<:Tuple}, Tuple{Float64, Array{Float64, 3}, Array{Float64, 3}, Float64, String, Nothing, Array{Float64, 3}, Array{Float64, 3}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:reg_x, :lu, :uu, :reg_u, :solver, :solver_state, :lx, :ux), Tuple{Float64, Array{Float64, 3}, Array{Float64, 3}, Float64, String, Nothing, Array{Float64, 3}, Array{Float64, 3}}}})
precompile(Tuple{PMPC.var"#solve_qp!##kw", NamedTuple{(:reg_x, :lu, :uu, :reg_u, :solver, :solver_state, :lx, :ux), Tuple{Float64, Array{Float64, 3}, Array{Float64, 3}, Float64, String, Nothing, Array{Float64, 3}, Array{Float64, 3}}}, typeof(PMPC.solve_qp!), PMPC.OSQPSolver{Float64}})
precompile(Tuple{Type{NamedTuple{(:P, :q, :A, :l, :u), T} where T<:Tuple}, Tuple{SparseArrays.SparseMatrixCSC{Float64, Int64}, Array{Float64, 1}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:P, :q, :A, :l, :u), Tuple{SparseArrays.SparseMatrixCSC{Float64, Int64}, Array{Float64, 1}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Array{Float64, 1}, Array{Float64, 1}}}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{NamedTuple{(:reg_x, :lu, :verbose, :uu, :reg_u, :solver, :solver_state, :lx, :ux), T} where T<:Tuple}, Tuple{Float64, Array{Float64, 3}, Bool, Array{Float64, 3}, Float64, String, Nothing, Array{Float64, 3}, Array{Float64, 3}}})
precompile(Tuple{Base.var"##s78#203", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.merge_types), Tuple{Vararg{Symbol}}, Type{var"#s78"} where var"#s78"<:(NamedTuple{names, T} where T<:Tuple where names), Type{var"#s77"} where var"#s77"<:(NamedTuple{names, T} where T<:Tuple where names)})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:P, :q, :A, :l, :u), Tuple{SparseArrays.SparseMatrixCSC{Float64, Int64}, Array{Float64, 1}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Array{Float64, 1}, Array{Float64, 1}}}, NamedTuple{(:reg_x, :lu, :verbose, :uu, :reg_u, :solver, :solver_state, :lx, :ux), Tuple{Float64, Array{Float64, 3}, Bool, Array{Float64, 3}, Float64, String, Nothing, Array{Float64, 3}, Array{Float64, 3}}}})
precompile(Tuple{OSQP.var"#setup!##kw", NamedTuple{(:P, :q, :A, :l, :u, :reg_x, :lu, :verbose, :uu, :reg_u, :solver, :solver_state, :lx, :ux), Tuple{SparseArrays.SparseMatrixCSC{Float64, Int64}, Array{Float64, 1}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Array{Float64, 1}, Array{Float64, 1}, Float64, Array{Float64, 3}, Bool, Array{Float64, 3}, Float64, String, Nothing, Array{Float64, 3}, Array{Float64, 3}}}, typeof(OSQP.setup!), OSQP.Model})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, OSQP.var"#7#8"{Base.Dict{Symbol, Any}, OSQP.Settings}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Real, 1}, Base.Generator{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, OSQP.var"#7#8"{Base.Dict{Symbol, Any}, OSQP.Settings}}, Int64, Int64})
precompile(Tuple{typeof(Base.convert), Type{Int64}, Bool})
precompile(Tuple{Type{OSQP.Settings}, Float64, Float64, Int64, Int64, Int64, Float64, Float64, Int64, Float64, Float64, Float64, Float64, Float64, Int32, Float64, Int64, Int64, Int64, Int64, Int64, Int64, Float64})
precompile(Tuple{Type{Ref{T} where T}, OSQP.Settings})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{OSQP.Settings}}, Base.RefValue{OSQP.Settings}})
precompile(Tuple{PMPC.var"#JuMP_solve##kw", NamedTuple{(:verbose,), Tuple{Bool}}, typeof(PMPC.JuMP_solve), PMPC.ConeProblem})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Symbol, 1}, PMPC.var"#61#65"{PMPC.ConeProblem}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Array{Symbol, 1}, PMPC.var"#61#65"{PMPC.ConeProblem}}, Int64, Int64})
precompile(Tuple{Type{MathOptInterface.OptimizerWithAttributes}, Function, Pair{String, Bool}})
precompile(Tuple{JuMP.var"##Model#1", Bool, Type{JuMP.Model}, Any})
precompile(Tuple{Type{MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}})
precompile(Tuple{Type{Base.Dict{Tuple{Type, Type}, Base.Dict{Int64, Int64}}}})
precompile(Tuple{typeof(JuMP.direct_model), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.AbstractOptimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}})
precompile(Tuple{typeof(MathOptInterface.is_empty), MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}})
precompile(Tuple{typeof(MathOptInterface.Utilities.mapreduce_constraints), MathOptInterface.Utilities.var"#168#169", typeof(Base.:(&)), MathOptInterface.Utilities.ModelFunctionConstraints{Float64}, Bool})
precompile(Tuple{typeof(JuMP._moi_mode), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.AbstractOptimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}})
precompile(Tuple{MathOptInterface.var"##instantiate#25", Type{Float64}, Nothing, typeof(MathOptInterface.instantiate), Any})
precompile(Tuple{typeof(MathOptInterface._instantiate_and_check), MathOptInterface.OptimizerWithAttributes})
precompile(Tuple{typeof(MathOptInterface._instantiate_and_check), Any})
precompile(Tuple{typeof(Mosek.msk_stream_callback_wrapper), Ptr{Nothing}, Ptr{UInt8}})
precompile(Tuple{typeof(Mosek.msk_info_callback_wrapper), Ptr{Nothing}, Ptr{Nothing}, Int32, Ptr{Float64}, Ptr{Int32}, Ptr{Int64}})
precompile(Tuple{typeof(Mosek.Optimizer)})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Nothing}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Nothing}}, Ptr{Nothing}})
#precompile(Tuple{typeof(MathOptInterface.is_empty), MosekTools.Optimizer})
#precompile(Tuple{typeof(MathOptInterface.set), MosekTools.Optimizer, MathOptInterface.RawOptimizerAttribute, Bool})
#precompile(Tuple{typeof(MathOptInterface.Bridges.full_bridge_optimizer), MosekTools.Optimizer, Type{Float64}})
precompile(Tuple{Type{MathOptInterface.Bridges.Variable.Map}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Tuple{Int64, Type}, MathOptInterface.Bridges.Constraint.AbstractBridge}}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Type, OrderedCollections.OrderedSet{T} where T}}})
precompile(Tuple{Type{Base.Dict{MathOptInterface.ObjectiveFunction{F} where F<:MathOptInterface.AbstractFunction, MathOptInterface.Bridges.Objective.AbstractBridge}}})
precompile(Tuple{Type{MathOptInterface.Bridges.Graph}})
#precompile(Tuple{typeof(MathOptInterface.Bridges.add_bridge), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, Type{MosekTools.ScaledPSDConeBridge{Float64, F, G} where G where F}})
precompile(Tuple{typeof(Base.empty!), MathOptInterface.Bridges.Graph})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), DataType}, Type})
precompile(Tuple{Base.Fix2{typeof(Base.isequal), UnionAll}, Type})
#precompile(Tuple{Type{MathOptInterface.Utilities.CachingOptimizer{O, M} where M<:MathOptInterface.ModelLike where O}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}, MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}})
precompile(Tuple{typeof(Base._all), MathOptInterface.Bridges.Variable.var"#1#2", Array{Union{Nothing, MathOptInterface.Bridges.Variable.AbstractBridge}, 1}, Base.Colon})
precompile(Tuple{typeof(Base._all), MathOptInterface.Bridges.Constraint.var"#1#2", Array{Union{Nothing, MathOptInterface.Bridges.Constraint.AbstractBridge}, 1}, Base.Colon})
precompile(Tuple{typeof(MathOptInterface.get), MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}, MathOptInterface.ListOfOptimizerAttributesSet})
precompile(Tuple{typeof(JuMP._error_if_cannot_register), JuMP.Model, Symbol})
precompile(Tuple{Type{Base.OneTo{T} where T<:Integer}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(JuMP.Containers.vectorized_product), Base.OneTo{Int64}})
precompile(Tuple{typeof(JuMP.Containers.container), Function, JuMP.Containers.VectorizedProductIterator{Tuple{Base.OneTo{Int64}}}, Type{JuMP.Containers.AutoContainerType}, Array{Any, 1}})
precompile(Tuple{typeof(Base.map), Function, JuMP.Containers.VectorizedProductIterator{Tuple{Base.OneTo{Int64}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, JuMP.Containers.var"#80#81"{PMPC.var"#64#68"}, JuMP.Containers.VectorizedProductIterator{Tuple{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{JuMP.Containers.VectorizedProductIterator{Tuple{Base.OneTo{Int64}}}, JuMP.Containers.var"#80#81"{PMPC.var"#64#68"}}})
precompile(Tuple{typeof(JuMP.add_variable), JuMP.Model, JuMP.ScalarVariable{Float64, Float64, Float64, Float64}, String})
#precompile(Tuple{typeof(JuMP._moi_add_variable), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, JuMP.Model, JuMP.ScalarVariable{Float64, Float64, Float64, Float64}, String})
precompile(Tuple{typeof(OSQP.clean!), OSQP.Model})
precompile(Tuple{typeof(MathOptInterface.add_variable), MathOptInterface.Utilities.VariablesContainer{Float64}})
precompile(Tuple{typeof(MathOptInterface.Utilities.broadcastcall), typeof(MathOptInterface.Utilities._add_variable), MathOptInterface.Utilities.ModelFunctionConstraints{Float64}})
precompile(Tuple{typeof(MathOptInterface.set), JuMP.Model, MathOptInterface.VariableName, JuMP.VariableRef, String})
#precompile(Tuple{typeof(MathOptInterface.set), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, MathOptInterface.VariableName, MathOptInterface.VariableIndex, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{MathOptInterface.VariableIndex, String}, String, MathOptInterface.VariableIndex})
precompile(Tuple{typeof(Base.setindex!), JuMP.Model, Array{JuMP.VariableRef, 1}, Symbol})
precompile(Tuple{typeof(MutableArithmetics.operate!!), typeof(MutableArithmetics.add_mul), MutableArithmetics.Zero, SparseArrays.SparseMatrixCSC{Float64, Int64}, Array{JuMP.VariableRef, 1}})
precompile(Tuple{typeof(JuMP._add_or_set!), OrderedCollections.OrderedDict{JuMP.VariableRef, Float64}, JuMP.VariableRef, Float64})
precompile(Tuple{typeof(Base.hash), JuMP.VariableRef, UInt64})
precompile(Tuple{typeof(MutableArithmetics.operate!!), typeof(MutableArithmetics.sub_mul), Array{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, 1}, Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, MutableArithmetics.var"#f#1"{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(MutableArithmetics.sub_mul), Tuple{Array{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, 1}, Array{Float64, 1}}}}, Tuple{Array{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), MutableArithmetics.var"#f#1"{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(MutableArithmetics.sub_mul), Tuple{Array{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, 1}, Array{Float64, 1}}}}, JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, Float64})
precompile(Tuple{MutableArithmetics.var"#f#1"{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(MutableArithmetics.sub_mul), Tuple{Array{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, 1}, Array{Float64, 1}}}}, JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, Float64})
precompile(Tuple{typeof(MutableArithmetics.broadcast!!), typeof(MutableArithmetics.sub_mul), Array{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), MutableArithmetics.var"#f#1"{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(MutableArithmetics.sub_mul), Tuple{Array{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, 1}, Int64}}}, JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, Int64})
precompile(Tuple{MutableArithmetics.var"#f#1"{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(MutableArithmetics.sub_mul), Tuple{Array{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, 1}, Int64}}}, JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, Int64})
precompile(Tuple{typeof(JuMP._functionize), Array{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, 1}})
precompile(Tuple{typeof(JuMP._desparsify), Array{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Function, Array{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, 1}, Base.RefValue{JuMP.Zeros}})
precompile(Tuple{Type{Base.RefValue{T} where T}, JuMP.var"#_error#80"{Tuple{Symbol, Expr}, Symbol, LineNumberNode}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(JuMP.build_constraint), Tuple{Base.RefValue{JuMP.var"#_error#80"{Tuple{Symbol, Expr}, Symbol, LineNumberNode}}, Array{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, 1}, Base.RefValue{JuMP.Zeros}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, JuMP.Model, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(JuMP.build_constraint), Tuple{Base.RefValue{JuMP.var"#_error#80"{Tuple{Symbol, Expr}, Symbol, LineNumberNode}}, Array{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, 1}, Base.RefValue{JuMP.Zeros}}}, String})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(JuMP.add_constraint), Tuple{Base.RefValue{JuMP.Model}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(JuMP.build_constraint), Tuple{Base.RefValue{JuMP.var"#_error#80"{Tuple{Symbol, Expr}, Symbol, LineNumberNode}}, Array{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, 1}, Base.RefValue{JuMP.Zeros}}}, Base.RefValue{String}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(JuMP.add_constraint), Tuple{Base.RefValue{JuMP.Model}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(JuMP.build_constraint), Tuple{Base.RefValue{JuMP.var"#_error#80"{Tuple{Symbol, Expr}, Symbol, LineNumberNode}}, Array{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, 1}, Base.RefValue{JuMP.Zeros}}}, Base.RefValue{String}}}})
precompile(Tuple{typeof(JuMP.add_constraint), JuMP.Model, JuMP.ScalarConstraint{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, MathOptInterface.EqualTo{Float64}}, String})
precompile(Tuple{typeof(JuMP.check_belongs_to_model), JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, JuMP.Model})
precompile(Tuple{Type{MathOptInterface.ScalarAffineFunction{T} where T}, JuMP.GenericAffExpr{Float64, JuMP.VariableRef}})
precompile(Tuple{typeof(JuMP._assert_isfinite), JuMP.GenericAffExpr{Float64, JuMP.VariableRef}})
#precompile(Tuple{typeof(JuMP._moi_add_constraint), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}})
precompile(Tuple{typeof(MathOptInterface.Utilities.constraints), MathOptInterface.Utilities.ModelFunctionConstraints{Float64}, Type{MathOptInterface.ScalarAffineFunction{Float64}}, Type{MathOptInterface.EqualTo{Float64}}})
precompile(Tuple{typeof(MathOptInterface.Utilities.constraints), MathOptInterface.Utilities.ModelScalarConstraints{Float64, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.ZeroOne}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.Integer}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.GreaterThan{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.Interval{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.Semicontinuous{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.Semiinteger{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.Parameter{Float64}}}, Type{MathOptInterface.ScalarAffineFunction{Float64}}, Type{MathOptInterface.EqualTo{Float64}}})
precompile(Tuple{typeof(MathOptInterface.add_constraint), MathOptInterface.Utilities.ModelFunctionConstraints{Float64}, MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}})
precompile(Tuple{typeof(MathOptInterface.Utilities.canonical), MathOptInterface.ScalarAffineFunction{Float64}})
precompile(Tuple{typeof(Base.setindex!), MathOptInterface.Utilities.CleverDicts.CleverDict{MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, Tuple{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, typeof(MathOptInterface.Utilities.CleverDicts.key_to_index), typeof(MathOptInterface.Utilities.CleverDicts.index_to_key)}, Tuple{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}})
precompile(Tuple{typeof(MutableArithmetics.operate!!), typeof(MutableArithmetics.sub_mul), MutableArithmetics.Zero, SparseArrays.SparseMatrixCSC{Float64, Int64}, Array{JuMP.VariableRef, 1}})
precompile(Tuple{typeof(MutableArithmetics.operate!!), typeof(MutableArithmetics.add_mul), Array{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, 1}, Array{Float64, 1}})
precompile(Tuple{Type{MathOptInterface.Nonnegatives}, Int64})
precompile(Tuple{typeof(JuMP.build_constraint), Function, Array{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, 1}, MathOptInterface.Nonnegatives})
precompile(Tuple{typeof(JuMP.add_constraint), JuMP.Model, JuMP.VectorConstraint{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, MathOptInterface.Nonnegatives, JuMP.VectorShape}, String})
precompile(Tuple{Type{MathOptInterface.VectorAffineFunction{T} where T}, Array{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, 1}})
precompile(Tuple{typeof(JuMP._fill_vaf!), Array{MathOptInterface.VectorAffineTerm{Float64}, 1}, Int64, Int64, JuMP.GenericAffExpr{Float64, JuMP.VariableRef}})
#precompile(Tuple{typeof(JuMP._moi_add_constraint), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonnegatives})
precompile(Tuple{typeof(OrderedCollections.hashindex), Tuple{DataType, DataType}, Int64})
#precompile(Tuple{typeof(MathOptInterface.Bridges._edge), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, Int64, Type{MathOptInterface.Bridges.Constraint.NonnegToNonposBridge{Float64, MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.VectorAffineFunction{Float64}}}})
#precompile(Tuple{typeof(MathOptInterface.Bridges.node), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, Type{MathOptInterface.VectorAffineFunction{Float64}}, Type{MathOptInterface.Nonpositives}})
#precompile(Tuple{typeof(MathOptInterface.Bridges._edge), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, Int64, Type{MathOptInterface.Bridges.Constraint.NonposToNonnegBridge{Float64, MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.VectorAffineFunction{Float64}}}})
#precompile(Tuple{typeof(MathOptInterface.Bridges._edge), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, Int64, Type{MathOptInterface.Bridges.Constraint.ScalarizeBridge{Float64, MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}}})
#precompile(Tuple{typeof(MathOptInterface.Bridges._edge), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, Int64, Type{MathOptInterface.Bridges.Constraint.VectorSlackBridge{Float64, MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonpositives}}})
#precompile(Tuple{typeof(MathOptInterface.Bridges.node), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, Type{MathOptInterface.Nonpositives}})
#precompile(Tuple{typeof(MathOptInterface.Bridges._edge), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, Int64, Type{MathOptInterface.Bridges.Constraint.NonposToNonnegBridge{Float64, MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.VectorOfVariables}}})
#precompile(Tuple{typeof(MathOptInterface.Bridges._edge), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, Int64, Type{MathOptInterface.Bridges.Constraint.ScalarizeBridge{Float64, MathOptInterface.VariableIndex, MathOptInterface.LessThan{Float64}}}})
#precompile(Tuple{typeof(MathOptInterface.Bridges._edge), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, Int64, Type{MathOptInterface.Bridges.Constraint.VectorFunctionizeBridge{Float64, MathOptInterface.Nonpositives}}})
#precompile(Tuple{typeof(MathOptInterface.Bridges._edge), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, Int64, Type{MathOptInterface.Bridges.Variable.NonposToNonnegBridge{Float64}}})
#precompile(Tuple{typeof(MathOptInterface.Bridges.node), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, Type{MathOptInterface.Nonnegatives}})
#precompile(Tuple{typeof(MathOptInterface.Bridges._edge), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, Int64, Type{MathOptInterface.Bridges.Constraint.NonnegToNonposBridge{Float64, MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.VectorOfVariables}}})
#precompile(Tuple{typeof(MathOptInterface.Bridges._edge), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, Int64, Type{MathOptInterface.Bridges.Constraint.ScalarizeBridge{Float64, MathOptInterface.VariableIndex, MathOptInterface.GreaterThan{Float64}}}})
#precompile(Tuple{typeof(MathOptInterface.Bridges._edge), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, Int64, Type{MathOptInterface.Bridges.Constraint.VectorFunctionizeBridge{Float64, MathOptInterface.Nonnegatives}}})
#precompile(Tuple{typeof(MathOptInterface.Bridges.node), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, Type{MathOptInterface.VectorAffineFunction{Float64}}, Type{MathOptInterface.Zeros}})
precompile(Tuple{typeof(MathOptInterface.supports_constraint), Type{MathOptInterface.Bridges.Constraint.ScalarizeBridge{Float64, F, S} where S where F}, Type{MathOptInterface.VectorAffineFunction{Float64}}, Type{MathOptInterface.Zeros}})
#precompile(Tuple{typeof(MathOptInterface.Bridges._edge), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, Int64, Type{MathOptInterface.Bridges.Constraint.ScalarizeBridge{Float64, MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}}})
#precompile(Tuple{typeof(MathOptInterface.Bridges._edge), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, Int64, Type{MathOptInterface.Bridges.Constraint.SplitIntervalBridge{Float64, MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Zeros, MathOptInterface.Nonnegatives, MathOptInterface.Nonpositives}}})
#precompile(Tuple{typeof(MathOptInterface.Bridges._edge), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, Int64, Type{MathOptInterface.Bridges.Constraint.ScalarizeBridge{Float64, MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.GreaterThan{Float64}}}})
#precompile(Tuple{typeof(MathOptInterface.Bridges._edge), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, Int64, Type{MathOptInterface.Bridges.Constraint.VectorSlackBridge{Float64, MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonnegatives}}})
precompile(Tuple{Type{Array{Tuple{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonnegatives}, 1}}, Array{MathOptInterface.ConstraintIndex{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonnegatives}, 1}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{MathOptInterface.ConstraintIndex{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonnegatives}, Tuple{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonnegatives}}}})
precompile(Tuple{Type{MathOptInterface.SecondOrderCone}, Int64})
precompile(Tuple{typeof(JuMP.build_constraint), Function, Array{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, 1}, MathOptInterface.SecondOrderCone})
precompile(Tuple{typeof(JuMP.add_constraint), JuMP.Model, JuMP.VectorConstraint{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, MathOptInterface.SecondOrderCone, JuMP.VectorShape}, String})
#precompile(Tuple{typeof(JuMP._moi_add_constraint), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.SecondOrderCone})
precompile(Tuple{Type{Array{Tuple{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.SecondOrderCone}, 1}}, Array{MathOptInterface.ConstraintIndex{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.SecondOrderCone}, 1}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{MathOptInterface.ConstraintIndex{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.SecondOrderCone}, Tuple{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.SecondOrderCone}}}})
precompile(Tuple{typeof(JuMP.build_constraint), Function, Array{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, 1}, MathOptInterface.ExponentialCone})
precompile(Tuple{typeof(JuMP.add_constraint), JuMP.Model, JuMP.VectorConstraint{JuMP.GenericAffExpr{Float64, JuMP.VariableRef}, MathOptInterface.ExponentialCone, JuMP.VectorShape}, String})
#precompile(Tuple{typeof(JuMP._moi_add_constraint), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.ExponentialCone})
precompile(Tuple{typeof(Base.adjoint), Array{Float64, 1}})
#precompile(Tuple{typeof(MutableArithmetics.operate!!), typeof(MutableArithmetics.add_mul), MutableArithmetics.Zero, LinearAlgebra.Adjoint{Float64, Array{Float64, 1}}, Array{JuMP.VariableRef, 1}})
precompile(Tuple{typeof(JuMP._replace_zero), JuMP.GenericAffExpr{Float64, JuMP.VariableRef}})
precompile(Tuple{typeof(JuMP.set_objective), JuMP.Model, MathOptInterface.OptimizationSense, JuMP.GenericAffExpr{Float64, JuMP.VariableRef}})
precompile(Tuple{typeof(MathOptInterface.set), JuMP.Model, MathOptInterface.ObjectiveSense, MathOptInterface.OptimizationSense})
#precompile(Tuple{typeof(MathOptInterface.set), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, MathOptInterface.ObjectiveSense, MathOptInterface.OptimizationSense})
precompile(Tuple{typeof(JuMP.set_objective_function), JuMP.Model, MathOptInterface.ScalarAffineFunction{Float64}})
#precompile(Tuple{typeof(MathOptInterface.supports), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, MathOptInterface.ObjectiveFunction{MathOptInterface.ScalarAffineFunction{Float64}}})
precompile(Tuple{typeof(MathOptInterface.set), JuMP.Model, MathOptInterface.ObjectiveFunction{MathOptInterface.ScalarAffineFunction{Float64}}, MathOptInterface.ScalarAffineFunction{Float64}})
#precompile(Tuple{typeof(MathOptInterface.set), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, MathOptInterface.ObjectiveFunction{MathOptInterface.ScalarAffineFunction{Float64}}, MathOptInterface.ScalarAffineFunction{Float64}})
precompile(Tuple{JuMP.var"##optimize!#113", Bool, MathOptInterface.Nonlinear.SparseReverseMode, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(JuMP.optimize!), JuMP.Model})
#precompile(Tuple{typeof(JuMP._moi_mode), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}})
#precompile(Tuple{typeof(MathOptInterface.Utilities.state), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{var"#s523"} where var"#s523"<:MathOptInterface.AbstractScalarSet, Int64}}})
#precompile(Tuple{typeof(MathOptInterface.optimize!), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}})
precompile(Tuple{typeof(MathOptInterface.Utilities.broadcastcall), Base.Fix2{typeof(MathOptInterface.Utilities.final_touch), Nothing}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}})
precompile(Tuple{typeof(MathOptInterface.Utilities.broadcastcall), Base.Fix2{typeof(MathOptInterface.Utilities.final_touch), Nothing}, MathOptInterface.Utilities.ModelScalarConstraints{Float64, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.ZeroOne}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.Integer}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.GreaterThan{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.Interval{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.Semicontinuous{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.Semiinteger{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.Parameter{Float64}}}})
precompile(Tuple{typeof(MathOptInterface.Utilities.broadcastcall), Base.Fix2{typeof(MathOptInterface.Utilities.final_touch), Nothing}, MathOptInterface.Utilities.ModelVectorConstraints{Float64, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Reals}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Zeros}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonnegatives}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonpositives}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Complements}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.NormInfinityCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.NormOneCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.SecondOrderCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.RotatedSecondOrderCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.GeometricMeanCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.ExponentialCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.DualExponentialCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.RelativeEntropyCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.NormSpectralCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.NormNuclearCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.PositiveSemidefiniteConeTriangle}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.PositiveSemidefiniteConeSquare}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.HermitianPositiveSemidefiniteConeTriangle}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.RootDetConeTriangle}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.RootDetConeSquare}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.LogDetConeTriangle}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.LogDetConeSquare}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.AllDifferent}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.CountDistinct}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.CountBelongs}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.CountAtLeast}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.CountGreaterThan}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Circuit}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Cumulative}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Path}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.PowerCone{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.DualPowerCone{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.SOS1{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.SOS2{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Indicator{MathOptInterface.ActivationCondition(0x00000001), MathOptInterface.LessThan{Float64}}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Indicator{MathOptInterface.ActivationCondition(0x00000000), MathOptInterface.LessThan{Float64}}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Table{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.BinPacking{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.HyperRectangle{Float64}}}})
precompile(Tuple{typeof(MathOptInterface.get), MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}, MathOptInterface.ListOfModelAttributesSet})
precompile(Tuple{typeof(MathOptInterface.get), MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.ListOfModelAttributesSet})
precompile(Tuple{typeof(Base.empty!), MathOptInterface.Bridges.Variable.Map})
precompile(Tuple{typeof(Base.empty!), OrderedCollections.OrderedDict{Tuple{Int64, Type}, MathOptInterface.Bridges.Constraint.AbstractBridge}})
precompile(Tuple{typeof(Base.empty!), OrderedCollections.OrderedDict{Type, OrderedCollections.OrderedSet{T} where T}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{MathOptInterface.ObjectiveFunction{F} where F<:MathOptInterface.AbstractFunction, MathOptInterface.Bridges.Objective.AbstractBridge}})
precompile(Tuple{typeof(Base._collect), Type{MathOptInterface.VariableIndex}, Base.Generator{Base.Iterators.Filter{MathOptInterface.Utilities.var"#145#147"{MathOptInterface.Utilities.VariablesContainer{Float64}}, Base.UnitRange{Int64}}, MathOptInterface.Utilities.var"#144#146"}, Base.SizeUnknown})
precompile(Tuple{typeof(MathOptInterface.get), MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}, MathOptInterface.ListOfConstraintTypesPresent})
precompile(Tuple{typeof(MathOptInterface.Utilities.broadcastvcat), MathOptInterface.Utilities.var"#166#167"{MathOptInterface.ListOfConstraintTypesPresent}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}})
precompile(Tuple{typeof(MathOptInterface.Utilities.broadcastvcat), MathOptInterface.Utilities.var"#166#167"{MathOptInterface.ListOfConstraintTypesPresent}, MathOptInterface.Utilities.ModelScalarConstraints{Float64, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.ZeroOne}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.Integer}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.GreaterThan{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.LessThan{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.Interval{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.Semicontinuous{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.Semiinteger{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.Parameter{Float64}}}})
precompile(Tuple{Type{Array{Tuple{Type, Type}, 1}}, Array{Tuple{DataType, DataType}, 1}})
precompile(Tuple{typeof(Base.vcat), Array{Tuple{Type, Type}, 1}, Array{Tuple{Type, Type}, 1}, Array{Tuple{Type, Type}, 1}, Vararg{Array{Tuple{Type, Type}, 1}}})
precompile(Tuple{MathOptInterface.Utilities.var"#166#167"{MathOptInterface.ListOfConstraintTypesPresent}, MathOptInterface.Utilities.ModelVectorConstraints{Float64, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Reals}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Zeros}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonnegatives}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonpositives}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Complements}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.NormInfinityCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.NormOneCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.SecondOrderCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.RotatedSecondOrderCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.GeometricMeanCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.ExponentialCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.DualExponentialCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.RelativeEntropyCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.NormSpectralCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.NormNuclearCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.PositiveSemidefiniteConeTriangle}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.PositiveSemidefiniteConeSquare}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.HermitianPositiveSemidefiniteConeTriangle}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.RootDetConeTriangle}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.RootDetConeSquare}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.LogDetConeTriangle}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.LogDetConeSquare}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.AllDifferent}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.CountDistinct}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.CountBelongs}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.CountAtLeast}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.CountGreaterThan}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Circuit}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Cumulative}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Path}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.PowerCone{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.DualPowerCone{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.SOS1{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.SOS2{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Indicator{MathOptInterface.ActivationCondition(0x00000001), MathOptInterface.LessThan{Float64}}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Indicator{MathOptInterface.ActivationCondition(0x00000000), MathOptInterface.LessThan{Float64}}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Table{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.BinPacking{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.HyperRectangle{Float64}}}})
precompile(Tuple{typeof(MathOptInterface.get), MathOptInterface.Utilities.ModelVectorConstraints{Float64, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Reals}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Zeros}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonnegatives}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonpositives}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Complements}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.NormInfinityCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.NormOneCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.SecondOrderCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.RotatedSecondOrderCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.GeometricMeanCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.ExponentialCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.DualExponentialCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.RelativeEntropyCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.NormSpectralCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.NormNuclearCone}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.PositiveSemidefiniteConeTriangle}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.PositiveSemidefiniteConeSquare}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.HermitianPositiveSemidefiniteConeTriangle}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.RootDetConeTriangle}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.RootDetConeSquare}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.LogDetConeTriangle}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.LogDetConeSquare}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.AllDifferent}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.CountDistinct}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.CountBelongs}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.CountAtLeast}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.CountGreaterThan}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Circuit}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Cumulative}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Path}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.PowerCone{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.DualPowerCone{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.SOS1{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.SOS2{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Indicator{MathOptInterface.ActivationCondition(0x00000001), MathOptInterface.LessThan{Float64}}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Indicator{MathOptInterface.ActivationCondition(0x00000000), MathOptInterface.LessThan{Float64}}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Table{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.BinPacking{Float64}}, MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.HyperRectangle{Float64}}}, MathOptInterface.ListOfConstraintTypesPresent})
precompile(Tuple{typeof(MathOptInterface.get), MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.ListOfConstraintTypesPresent})
precompile(Tuple{typeof(MathOptInterface.Utilities._add_constraint_type), Array{Tuple{Type, Type}, 1}, MathOptInterface.Utilities.VariablesContainer{Float64}, Type{MathOptInterface.EqualTo{Float64}}})
precompile(Tuple{typeof(MathOptInterface.Utilities._add_constraint_type), Array{Tuple{Type, Type}, 1}, MathOptInterface.Utilities.VariablesContainer{Float64}, Type{MathOptInterface.GreaterThan{Float64}}})
precompile(Tuple{typeof(MathOptInterface.Utilities._add_constraint_type), Array{Tuple{Type, Type}, 1}, MathOptInterface.Utilities.VariablesContainer{Float64}, Type{MathOptInterface.LessThan{Float64}}})
precompile(Tuple{typeof(MathOptInterface.Utilities._add_constraint_type), Array{Tuple{Type, Type}, 1}, MathOptInterface.Utilities.VariablesContainer{Float64}, Type{MathOptInterface.Interval{Float64}}})
precompile(Tuple{typeof(MathOptInterface.Utilities._add_constraint_type), Array{Tuple{Type, Type}, 1}, MathOptInterface.Utilities.VariablesContainer{Float64}, Type{MathOptInterface.Semicontinuous{Float64}}})
precompile(Tuple{typeof(MathOptInterface.Utilities._add_constraint_type), Array{Tuple{Type, Type}, 1}, MathOptInterface.Utilities.VariablesContainer{Float64}, Type{MathOptInterface.Semiinteger{Float64}}})
precompile(Tuple{typeof(MathOptInterface.Utilities._add_constraint_type), Array{Tuple{Type, Type}, 1}, MathOptInterface.Utilities.VariablesContainer{Float64}, Type{MathOptInterface.Integer}})
precompile(Tuple{typeof(MathOptInterface.Utilities._add_constraint_type), Array{Tuple{Type, Type}, 1}, MathOptInterface.Utilities.VariablesContainer{Float64}, Type{MathOptInterface.ZeroOne}})
precompile(Tuple{typeof(MathOptInterface.Utilities._add_constraint_type), Array{Tuple{Type, Type}, 1}, MathOptInterface.Utilities.VariablesContainer{Float64}, Type{MathOptInterface.Parameter{Float64}}})
precompile(Tuple{typeof(Base.vcat), Array{Tuple{Type, Type}, 1}, Array{Tuple{Type, Type}, 1}})
precompile(Tuple{MathOptInterface.Utilities.var"#121#124", Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.setindex!), MathOptInterface.Utilities.CleverDicts.CleverDict{MathOptInterface.VariableIndex, MathOptInterface.VariableIndex, typeof(MathOptInterface.Utilities.CleverDicts.key_to_index), typeof(MathOptInterface.Utilities.CleverDicts.index_to_key)}, MathOptInterface.VariableIndex, MathOptInterface.VariableIndex})
precompile(Tuple{typeof(MathOptInterface.get), MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}, MathOptInterface.ListOfVariableAttributesSet})
precompile(Tuple{Type{Array{MathOptInterface.AbstractVariableAttribute, 1}}, Array{MathOptInterface.VariableName, 1}})
#precompile(Tuple{typeof(MathOptInterface.Utilities._pass_attribute), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}, MathOptInterface.Utilities.IndexMap, MathOptInterface.ObjectiveSense})
#precompile(Tuple{typeof(MathOptInterface.Utilities._pass_attribute), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}, MathOptInterface.Utilities.IndexMap, MathOptInterface.ObjectiveFunction{MathOptInterface.ScalarAffineFunction{Float64}}})
precompile(Tuple{typeof(MathOptInterface.get), MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}, MathOptInterface.ObjectiveFunction{MathOptInterface.ScalarAffineFunction{Float64}}})
precompile(Tuple{typeof(MathOptInterface.get), MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.ObjectiveFunction{MathOptInterface.ScalarAffineFunction{Float64}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{MathOptInterface.ScalarAffineTerm{Float64}, 1}, MathOptInterface.Utilities.var"#5#6"{MathOptInterface.Utilities.var"#1#2"{MathOptInterface.Utilities.IndexMap}}}})
precompile(Tuple{MathOptInterface.Utilities.var"#117#119", Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, DataType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, DataType}, Int64, Int64})
precompile(Tuple{typeof(MathOptInterface.get), MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}, MathOptInterface.ListOfConstraintIndices{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}})
precompile(Tuple{typeof(MathOptInterface.get), MathOptInterface.Utilities.ModelFunctionConstraints{Float64}, MathOptInterface.ListOfConstraintIndices{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}})
precompile(Tuple{typeof(Base.copyto!), Array{MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, 1}, Base.KeySet{MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, MathOptInterface.Utilities.CleverDicts.CleverDict{MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, Tuple{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, typeof(MathOptInterface.Utilities.CleverDicts.key_to_index), typeof(MathOptInterface.Utilities.CleverDicts.index_to_key)}}})
#precompile(Tuple{typeof(MathOptInterface.Utilities._copy_constraints), MosekTools.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}, MathOptInterface.Utilities.IndexMap, Array{MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, 1}})
precompile(Tuple{Type{MathOptInterface.Utilities.DoubleDicts.IndexDoubleDictInner{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}}, MathOptInterface.Utilities.DoubleDicts.IndexDoubleDict})
precompile(Tuple{typeof(MathOptInterface.get), MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, MathOptInterface.ConstraintFunction, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}})
precompile(Tuple{typeof(MathOptInterface.get), MathOptInterface.Utilities.VectorOfConstraints{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, MathOptInterface.ConstraintSet, MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}})
precompile(Tuple{typeof(MathOptInterface.get), MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}, MathOptInterface.ListOfConstraintIndices{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.SecondOrderCone}})
precompile(Tuple{typeof(Base.copyto!), Array{MathOptInterface.ConstraintIndex{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.SecondOrderCone}, 1}, Base.KeySet{MathOptInterface.ConstraintIndex{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.SecondOrderCone}, MathOptInterface.Utilities.CleverDicts.CleverDict{MathOptInterface.ConstraintIndex{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.SecondOrderCone}, Tuple{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.SecondOrderCone}, typeof(MathOptInterface.Utilities.CleverDicts.key_to_index), typeof(MathOptInterface.Utilities.CleverDicts.index_to_key)}}})
#precompile(Tuple{typeof(MathOptInterface.Utilities._copy_constraints), MosekTools.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}, MathOptInterface.Utilities.IndexMap, Array{MathOptInterface.ConstraintIndex{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.SecondOrderCone}, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{MathOptInterface.VectorAffineTerm{Float64}, 1}, MathOptInterface.Utilities.var"#5#6"{MathOptInterface.Utilities.var"#1#2"{MathOptInterface.Utilities.IndexMap}}}})
precompile(Tuple{typeof(MathOptInterface.get), MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}, MathOptInterface.ListOfConstraintIndices{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.ExponentialCone}})
#precompile(Tuple{typeof(MathOptInterface.Utilities._copy_constraints), MosekTools.Optimizer, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}, MathOptInterface.Utilities.IndexMap, Array{MathOptInterface.ConstraintIndex{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.ExponentialCone}, 1}})
precompile(Tuple{typeof(MathOptInterface.get), MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}, MathOptInterface.ListOfConstraintIndices{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonnegatives}})
precompile(Tuple{typeof(Base.copyto!), Array{MathOptInterface.ConstraintIndex{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonnegatives}, 1}, Base.KeySet{MathOptInterface.ConstraintIndex{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonnegatives}, MathOptInterface.Utilities.CleverDicts.CleverDict{MathOptInterface.ConstraintIndex{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonnegatives}, Tuple{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonnegatives}, typeof(MathOptInterface.Utilities.CleverDicts.key_to_index), typeof(MathOptInterface.Utilities.CleverDicts.index_to_key)}}})
#precompile(Tuple{typeof(MathOptInterface.Utilities._copy_constraints), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}, MathOptInterface.Utilities.IndexMap, Array{MathOptInterface.ConstraintIndex{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonnegatives}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Type}, Type, Tuple{DataType, DataType}})
#precompile(Tuple{typeof(MathOptInterface.Bridges.add_bridged_constraint), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, Type, MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonnegatives})
#precompile(Tuple{typeof(MathOptInterface.Bridges.Constraint.bridge_constraint), Type{MathOptInterface.Bridges.Constraint.ScalarizeBridge{Float64, MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.GreaterThan{Float64}}}, MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonnegatives})
precompile(Tuple{typeof(MathOptInterface.Bridges.Constraint.add_key_for_bridge), MathOptInterface.Bridges.Constraint.Map, MathOptInterface.Bridges.Constraint.ScalarizeBridge{Float64, MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.GreaterThan{Float64}}, MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonnegatives})
#precompile(Tuple{typeof(MathOptInterface.Utilities.pass_attributes), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}, MathOptInterface.Utilities.IndexMap, Array{MathOptInterface.ConstraintIndex{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, 1}})
precompile(Tuple{typeof(MathOptInterface.get), MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}, MathOptInterface.ListOfConstraintAttributesSet{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}})
precompile(Tuple{typeof(Base._any), MathOptInterface.Utilities.var"#186#187"{MathOptInterface.ScalarAffineFunction{Float64}, MathOptInterface.EqualTo{Float64}}, Base.KeySet{MathOptInterface.ConstraintIndex{F, S} where S where F, Base.Dict{MathOptInterface.ConstraintIndex{F, S} where S where F, String}}, Base.Colon})
#precompile(Tuple{typeof(MathOptInterface.Utilities.pass_attributes), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}, MathOptInterface.Utilities.IndexMap, Array{MathOptInterface.ConstraintIndex{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonnegatives}, 1}})
precompile(Tuple{typeof(Base._any), MathOptInterface.Utilities.var"#186#187"{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonnegatives}, Base.KeySet{MathOptInterface.ConstraintIndex{F, S} where S where F, Base.Dict{MathOptInterface.ConstraintIndex{F, S} where S where F, String}}, Base.Colon})
precompile(Tuple{typeof(Base._any), MathOptInterface.Utilities.var"#245#247"{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.Nonnegatives}, Base.KeySet{MathOptInterface.ConstraintIndex{F, S} where S where F, Base.Dict{MathOptInterface.ConstraintIndex{F, S} where S where F, String}}, Base.Colon})
#precompile(Tuple{typeof(MathOptInterface.Utilities.pass_attributes), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}, MathOptInterface.Utilities.IndexMap, Array{MathOptInterface.ConstraintIndex{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.SecondOrderCone}, 1}})
precompile(Tuple{typeof(Base._any), MathOptInterface.Utilities.var"#186#187"{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.SecondOrderCone}, Base.KeySet{MathOptInterface.ConstraintIndex{F, S} where S where F, Base.Dict{MathOptInterface.ConstraintIndex{F, S} where S where F, String}}, Base.Colon})
precompile(Tuple{typeof(Base._any), MathOptInterface.Utilities.var"#245#247"{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.SecondOrderCone}, Base.KeySet{MathOptInterface.ConstraintIndex{F, S} where S where F, Base.Dict{MathOptInterface.ConstraintIndex{F, S} where S where F, String}}, Base.Colon})
#precompile(Tuple{typeof(MathOptInterface.Utilities.pass_attributes), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}, MathOptInterface.Utilities.IndexMap, Array{MathOptInterface.ConstraintIndex{MathOptInterface.VectorAffineFunction{Float64}, MathOptInterface.ExponentialCone}, 1}})
precompile(Tuple{typeof(Base.cconvert), Type, Base.RefValue{Int32}})
precompile(Tuple{typeof(Base.convert), Type{Ref{Int32}}, Base.RefValue{Int32}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ref{Int32}}, Base.RefValue{Int32}})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Int32}})
precompile(Tuple{Type{Array{Int32, 1}}, UndefInitializer, Int32})
precompile(Tuple{typeof(Base.disable_sigint), Mosek.var"#376#379"{Mosek.Task, Mosek.Soltype, Array{Int32, 1}}})
precompile(Tuple{typeof(Base._array_for), Type{Mosek.Stakey}, Array{Int32, 1}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Mosek.Stakey, 1}})
precompile(Tuple{Type{Mosek.Stakey}, Int32})
precompile(Tuple{typeof(Base.setindex!), Array{Mosek.Stakey, 1}, Mosek.Stakey, Int64})
precompile(Tuple{typeof(Base.disable_sigint), Mosek.var"#370#373"{Mosek.Task, Mosek.Soltype, Array{Int32, 1}}})
precompile(Tuple{typeof(MathOptInterface.Utilities._reverse_index_map), MathOptInterface.Utilities.IndexMap})
precompile(Tuple{typeof(MathOptInterface.Utilities._reverse_dict), MathOptInterface.Utilities.CleverDicts.CleverDict{MathOptInterface.VariableIndex, MathOptInterface.VariableIndex, typeof(MathOptInterface.Utilities.CleverDicts.key_to_index), typeof(MathOptInterface.Utilities.CleverDicts.index_to_key)}, MathOptInterface.Utilities.CleverDicts.CleverDict{MathOptInterface.VariableIndex, MathOptInterface.VariableIndex, typeof(MathOptInterface.Utilities.CleverDicts.key_to_index), typeof(MathOptInterface.Utilities.CleverDicts.index_to_key)}})
precompile(Tuple{typeof(MathOptInterface.Utilities._reverse_dict), MathOptInterface.Utilities.DoubleDicts.IndexDoubleDict, MathOptInterface.Utilities.DoubleDicts.IndexDoubleDict})
precompile(Tuple{typeof(MathOptInterface.Utilities._reverse_dict), Base.Dict{Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{JuMP.VariableRef, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(JuMP.value), Tuple{Array{JuMP.VariableRef, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(JuMP.value), Tuple{Array{JuMP.VariableRef, 1}}}})
#precompile(Tuple{typeof(JuMP._moi_get_result), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, MathOptInterface.VariablePrimal, Vararg{Any}})
#precompile(Tuple{typeof(MathOptInterface.get), MathOptInterface.Utilities.CachingOptimizer{MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, MathOptInterface.Utilities.UniversalFallback{MathOptInterface.Utilities.GenericModel{Float64, MathOptInterface.Utilities.ObjectiveContainer{Float64}, MathOptInterface.Utilities.VariablesContainer{Float64}, MathOptInterface.Utilities.ModelFunctionConstraints{Float64}}}}, MathOptInterface.VariablePrimal, MathOptInterface.VariableIndex})
#precompile(Tuple{typeof(MathOptInterface.get), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, MathOptInterface.VariablePrimal, MathOptInterface.VariableIndex})
#precompile(Tuple{typeof(MathOptInterface.Bridges.unbridged_function), MathOptInterface.Bridges.LazyBridgeOptimizer{MosekTools.Optimizer}, Float64})
precompile(Tuple{typeof(MathOptInterface.Utilities.map_indices), MathOptInterface.Utilities.IndexMap, MathOptInterface.VariablePrimal, Float64})
precompile(Tuple{Type{NamedTuple{(:x,), T} where T<:Tuple}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:x,), Tuple{Array{Float64, 1}}}, Symbol})
precompile(Tuple{typeof(Mosek.deletetask), Mosek.Task})

























































